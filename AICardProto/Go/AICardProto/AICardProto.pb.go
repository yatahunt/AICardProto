// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: AICardProto/AICardProto.proto

package AIPokerProto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerStatus int32

const (
	PlayerStatus_PlayerStatusJoined        PlayerStatus = 0
	PlayerStatus_PlayerStatusCheck         PlayerStatus = 1
	PlayerStatus_PlayerStatusCall          PlayerStatus = 2
	PlayerStatus_PlayerStatusAllIn         PlayerStatus = 3
	PlayerStatus_PlayerStatusRaised        PlayerStatus = 4
	PlayerStatus_PlayerStatusFold          PlayerStatus = 5
	PlayerStatus_PlayerStatusWaiting       PlayerStatus = 6
	PlayerStatus_PlayerStatusLeaveGame     PlayerStatus = 99
	PlayerStatus_PlayerStatusBankrupt      PlayerStatus = 100
	PlayerStatus_PlayerStatusIllegalAction PlayerStatus = 1000
	PlayerStatus_PlayerStatusTimeOut       PlayerStatus = 1002
)

// Enum value maps for PlayerStatus.
var (
	PlayerStatus_name = map[int32]string{
		0:    "PlayerStatusJoined",
		1:    "PlayerStatusCheck",
		2:    "PlayerStatusCall",
		3:    "PlayerStatusAllIn",
		4:    "PlayerStatusRaised",
		5:    "PlayerStatusFold",
		6:    "PlayerStatusWaiting",
		99:   "PlayerStatusLeaveGame",
		100:  "PlayerStatusBankrupt",
		1000: "PlayerStatusIllegalAction",
		1002: "PlayerStatusTimeOut",
	}
	PlayerStatus_value = map[string]int32{
		"PlayerStatusJoined":        0,
		"PlayerStatusCheck":         1,
		"PlayerStatusCall":          2,
		"PlayerStatusAllIn":         3,
		"PlayerStatusRaised":        4,
		"PlayerStatusFold":          5,
		"PlayerStatusWaiting":       6,
		"PlayerStatusLeaveGame":     99,
		"PlayerStatusBankrupt":      100,
		"PlayerStatusIllegalAction": 1000,
		"PlayerStatusTimeOut":       1002,
	}
)

func (x PlayerStatus) Enum() *PlayerStatus {
	p := new(PlayerStatus)
	*p = x
	return p
}

func (x PlayerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_AICardProto_AICardProto_proto_enumTypes[0].Descriptor()
}

func (PlayerStatus) Type() protoreflect.EnumType {
	return &file_AICardProto_AICardProto_proto_enumTypes[0]
}

func (x PlayerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStatus.Descriptor instead.
func (PlayerStatus) EnumDescriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{0}
}

type GameStatus int32

const (
	GameStatus_GameWaitingToStart GameStatus = 0
	// game in progress
	GameStatus_GamePreFlop   GameStatus = 10
	GameStatus_GameFlop      GameStatus = 11
	GameStatus_GameRiver     GameStatus = 12
	GameStatus_GameTurn      GameStatus = 13
	GameStatus_GameShowDown  GameStatus = 14
	GameStatus_GameFinished  GameStatus = 99
	GameStatus_IllegalStatus GameStatus = 1000
)

// Enum value maps for GameStatus.
var (
	GameStatus_name = map[int32]string{
		0:    "GameWaitingToStart",
		10:   "GamePreFlop",
		11:   "GameFlop",
		12:   "GameRiver",
		13:   "GameTurn",
		14:   "GameShowDown",
		99:   "GameFinished",
		1000: "IllegalStatus",
	}
	GameStatus_value = map[string]int32{
		"GameWaitingToStart": 0,
		"GamePreFlop":        10,
		"GameFlop":           11,
		"GameRiver":          12,
		"GameTurn":           13,
		"GameShowDown":       14,
		"GameFinished":       99,
		"IllegalStatus":      1000,
	}
)

func (x GameStatus) Enum() *GameStatus {
	p := new(GameStatus)
	*p = x
	return p
}

func (x GameStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_AICardProto_AICardProto_proto_enumTypes[1].Descriptor()
}

func (GameStatus) Type() protoreflect.EnumType {
	return &file_AICardProto_AICardProto_proto_enumTypes[1]
}

func (x GameStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameStatus.Descriptor instead.
func (GameStatus) EnumDescriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{1}
}

type PlayerID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *PlayerID) Reset() {
	*x = PlayerID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerID) ProtoMessage() {}

func (x *PlayerID) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerID.ProtoReflect.Descriptor instead.
func (*PlayerID) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerID) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GameStateID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GameStateID) Reset() {
	*x = GameStateID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStateID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStateID) ProtoMessage() {}

func (x *GameStateID) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStateID.ProtoReflect.Descriptor instead.
func (*GameStateID) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{1}
}

func (x *GameStateID) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type Chips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chips int64 `protobuf:"varint,1,opt,name=Chips,proto3" json:"Chips,omitempty"`
}

func (x *Chips) Reset() {
	*x = Chips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chips) ProtoMessage() {}

func (x *Chips) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chips.ProtoReflect.Descriptor instead.
func (*Chips) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{2}
}

func (x *Chips) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number   string `protobuf:"bytes,1,opt,name=Number,proto3" json:"Number,omitempty"`
	Suit     string `protobuf:"bytes,2,opt,name=Suit,proto3" json:"Suit,omitempty"`
	SuitChar string `protobuf:"bytes,3,opt,name=SuitChar,proto3" json:"SuitChar,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{3}
}

func (x *Card) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Card) GetSuit() string {
	if x != nil {
		return x.Suit
	}
	return ""
}

func (x *Card) GetSuitChar() string {
	if x != nil {
		return x.SuitChar
	}
	return ""
}

type PlayerDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     *PlayerID `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name   string    `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Secret string    `protobuf:"bytes,3,opt,name=Secret,proto3" json:"Secret,omitempty"`
}

func (x *PlayerDefinition) Reset() {
	*x = PlayerDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDefinition) ProtoMessage() {}

func (x *PlayerDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDefinition.ProtoReflect.Descriptor instead.
func (*PlayerDefinition) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerDefinition) GetID() *PlayerID {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *PlayerDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerDefinition) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type PlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              *PlayerID    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Cards           []*Card      `protobuf:"bytes,2,rep,name=Cards,proto3" json:"Cards,omitempty"`
	Chips           *Chips       `protobuf:"bytes,3,opt,name=Chips,proto3" json:"Chips,omitempty"`
	Status          PlayerStatus `protobuf:"varint,4,opt,name=Status,proto3,enum=AIPokerProto.PlayerStatus" json:"Status,omitempty"`
	BettedThisHand  *Chips       `protobuf:"bytes,5,opt,name=BettedThisHand,proto3" json:"BettedThisHand,omitempty"`
	BettedThisStage *Chips       `protobuf:"bytes,6,opt,name=BettedThisStage,proto3" json:"BettedThisStage,omitempty"`
	OutOfGame       bool         `protobuf:"varint,10,opt,name=OutOfGame,proto3" json:"OutOfGame,omitempty"`
	OutOfHand       bool         `protobuf:"varint,11,opt,name=OutOfHand,proto3" json:"OutOfHand,omitempty"`
	BankruptRound   int64        `protobuf:"varint,12,opt,name=BankruptRound,proto3" json:"BankruptRound,omitempty"`
}

func (x *PlayerState) Reset() {
	*x = PlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerState) ProtoMessage() {}

func (x *PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerState.ProtoReflect.Descriptor instead.
func (*PlayerState) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerState) GetID() *PlayerID {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *PlayerState) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *PlayerState) GetChips() *Chips {
	if x != nil {
		return x.Chips
	}
	return nil
}

func (x *PlayerState) GetStatus() PlayerStatus {
	if x != nil {
		return x.Status
	}
	return PlayerStatus_PlayerStatusJoined
}

func (x *PlayerState) GetBettedThisHand() *Chips {
	if x != nil {
		return x.BettedThisHand
	}
	return nil
}

func (x *PlayerState) GetBettedThisStage() *Chips {
	if x != nil {
		return x.BettedThisStage
	}
	return nil
}

func (x *PlayerState) GetOutOfGame() bool {
	if x != nil {
		return x.OutOfGame
	}
	return false
}

func (x *PlayerState) GetOutOfHand() bool {
	if x != nil {
		return x.OutOfHand
	}
	return false
}

func (x *PlayerState) GetBankruptRound() int64 {
	if x != nil {
		return x.BankruptRound
	}
	return 0
}

type GameInteraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player's action.
	Action   PlayerStatus `protobuf:"varint,1,opt,name=Action,proto3,enum=AIPokerProto.PlayerStatus" json:"Action,omitempty"`
	Amount   *Chips       `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	PlayerID *PlayerID    `protobuf:"bytes,3,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
}

func (x *GameInteraction) Reset() {
	*x = GameInteraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInteraction) ProtoMessage() {}

func (x *GameInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInteraction.ProtoReflect.Descriptor instead.
func (*GameInteraction) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{6}
}

func (x *GameInteraction) GetAction() PlayerStatus {
	if x != nil {
		return x.Action
	}
	return PlayerStatus_PlayerStatusJoined
}

func (x *GameInteraction) GetAmount() *Chips {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *GameInteraction) GetPlayerID() *PlayerID {
	if x != nil {
		return x.PlayerID
	}
	return nil
}

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              *GameStateID   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Status          GameStatus     `protobuf:"varint,100,opt,name=Status,proto3,enum=AIPokerProto.GameStatus" json:"Status,omitempty"`
	Dealer          *PlayerID      `protobuf:"bytes,2,opt,name=Dealer,proto3" json:"Dealer,omitempty"`
	SmallBlind      *PlayerID      `protobuf:"bytes,3,opt,name=SmallBlind,proto3" json:"SmallBlind,omitempty"`
	BigBlind        *PlayerID      `protobuf:"bytes,4,opt,name=BigBlind,proto3" json:"BigBlind,omitempty"`
	Pot             *Chips         `protobuf:"bytes,5,opt,name=Pot,proto3" json:"Pot,omitempty"`
	BettedThisHand  *Chips         `protobuf:"bytes,6,opt,name=BettedThisHand,proto3" json:"BettedThisHand,omitempty"`
	BettedThisStage *Chips         `protobuf:"bytes,7,opt,name=BettedThisStage,proto3" json:"BettedThisStage,omitempty"`
	Round           int64          `protobuf:"varint,8,opt,name=Round,proto3" json:"Round,omitempty"`
	Players         []*PlayerState `protobuf:"bytes,9,rep,name=Players,proto3" json:"Players,omitempty"`
	ComunityCards   []*Card        `protobuf:"bytes,11,rep,name=ComunityCards,proto3" json:"ComunityCards,omitempty"`
	Winner          *PlayerID      `protobuf:"bytes,12,opt,name=Winner,proto3" json:"Winner,omitempty"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{7}
}

func (x *GameState) GetID() *GameStateID {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *GameState) GetStatus() GameStatus {
	if x != nil {
		return x.Status
	}
	return GameStatus_GameWaitingToStart
}

func (x *GameState) GetDealer() *PlayerID {
	if x != nil {
		return x.Dealer
	}
	return nil
}

func (x *GameState) GetSmallBlind() *PlayerID {
	if x != nil {
		return x.SmallBlind
	}
	return nil
}

func (x *GameState) GetBigBlind() *PlayerID {
	if x != nil {
		return x.BigBlind
	}
	return nil
}

func (x *GameState) GetPot() *Chips {
	if x != nil {
		return x.Pot
	}
	return nil
}

func (x *GameState) GetBettedThisHand() *Chips {
	if x != nil {
		return x.BettedThisHand
	}
	return nil
}

func (x *GameState) GetBettedThisStage() *Chips {
	if x != nil {
		return x.BettedThisStage
	}
	return nil
}

func (x *GameState) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GameState) GetPlayers() []*PlayerState {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameState) GetComunityCards() []*Card {
	if x != nil {
		return x.ComunityCards
	}
	return nil
}

func (x *GameState) GetWinner() *PlayerID {
	if x != nil {
		return x.Winner
	}
	return nil
}

type GameDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	InitialPlayers int64  `protobuf:"varint,3,opt,name=InitialPlayers,proto3" json:"InitialPlayers,omitempty"`
	MaxRounds      int64  `protobuf:"varint,4,opt,name=MaxRounds,proto3" json:"MaxRounds,omitempty"`
	// int64 MaxTime = 5;
	// int64 MinTime = 6;
	MaxRaise *Chips `protobuf:"bytes,7,opt,name=MaxRaise,proto3" json:"MaxRaise,omitempty"`
	MinRaise *Chips `protobuf:"bytes,8,opt,name=MinRaise,proto3" json:"MinRaise,omitempty"`
	// Chips MaxBet = 9;
	// Chips MinBet = 10;
	SmallBlind          *Chips `protobuf:"bytes,11,opt,name=SmallBlind,proto3" json:"SmallBlind,omitempty"`
	BigBlind            *Chips `protobuf:"bytes,12,opt,name=BigBlind,proto3" json:"BigBlind,omitempty"`
	StartingPlayerChips *Chips `protobuf:"bytes,13,opt,name=StartingPlayerChips,proto3" json:"StartingPlayerChips,omitempty"`
}

func (x *GameDefinition) Reset() {
	*x = GameDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDefinition) ProtoMessage() {}

func (x *GameDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDefinition.ProtoReflect.Descriptor instead.
func (*GameDefinition) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{8}
}

func (x *GameDefinition) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GameDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameDefinition) GetInitialPlayers() int64 {
	if x != nil {
		return x.InitialPlayers
	}
	return 0
}

func (x *GameDefinition) GetMaxRounds() int64 {
	if x != nil {
		return x.MaxRounds
	}
	return 0
}

func (x *GameDefinition) GetMaxRaise() *Chips {
	if x != nil {
		return x.MaxRaise
	}
	return nil
}

func (x *GameDefinition) GetMinRaise() *Chips {
	if x != nil {
		return x.MinRaise
	}
	return nil
}

func (x *GameDefinition) GetSmallBlind() *Chips {
	if x != nil {
		return x.SmallBlind
	}
	return nil
}

func (x *GameDefinition) GetBigBlind() *Chips {
	if x != nil {
		return x.BigBlind
	}
	return nil
}

func (x *GameDefinition) GetStartingPlayerChips() *Chips {
	if x != nil {
		return x.StartingPlayerChips
	}
	return nil
}

type PlayerInscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *PlayerDefinition `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"`
	Game   *GameDefinition   `protobuf:"bytes,2,opt,name=Game,proto3" json:"Game,omitempty"`
}

func (x *PlayerInscription) Reset() {
	*x = PlayerInscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInscription) ProtoMessage() {}

func (x *PlayerInscription) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInscription.ProtoReflect.Descriptor instead.
func (*PlayerInscription) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerInscription) GetPlayer() *PlayerDefinition {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *PlayerInscription) GetGame() *GameDefinition {
	if x != nil {
		return x.Game
	}
	return nil
}

// The response message containing the greetings
type GameHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   []*GameState        `protobuf:"bytes,1,rep,name=State,proto3" json:"State,omitempty"`
	Players []*PlayerDefinition `protobuf:"bytes,2,rep,name=Players,proto3" json:"Players,omitempty"`
	Game    *GameDefinition     `protobuf:"bytes,3,opt,name=Game,proto3" json:"Game,omitempty"`
}

func (x *GameHistory) Reset() {
	*x = GameHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AICardProto_AICardProto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameHistory) ProtoMessage() {}

func (x *GameHistory) ProtoReflect() protoreflect.Message {
	mi := &file_AICardProto_AICardProto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameHistory.ProtoReflect.Descriptor instead.
func (*GameHistory) Descriptor() ([]byte, []int) {
	return file_AICardProto_AICardProto_proto_rawDescGZIP(), []int{10}
}

func (x *GameHistory) GetState() []*GameState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GameHistory) GetPlayers() []*PlayerDefinition {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameHistory) GetGame() *GameDefinition {
	if x != nil {
		return x.Game
	}
	return nil
}

var File_AICardProto_AICardProto_proto protoreflect.FileDescriptor

var file_AICardProto_AICardProto_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x41, 0x49, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x41, 0x49,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1a, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x1d, 0x0a, 0x0b, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x1d, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x43, 0x68, 0x69, 0x70, 0x73, 0x22, 0x4e, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x75, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x75, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x75, 0x69, 0x74, 0x43, 0x68, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x75, 0x69, 0x74, 0x43, 0x68, 0x61, 0x72, 0x22, 0x66, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22,
	0x9c, 0x03, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x49,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x69, 0x70, 0x73, 0x52, 0x05, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x41,
	0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3b, 0x0a, 0x0e, 0x42, 0x65, 0x74, 0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x73, 0x48, 0x61,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x52, 0x0e, 0x42,
	0x65, 0x74, 0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x3d, 0x0a,
	0x0f, 0x42, 0x65, 0x74, 0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x52, 0x0f, 0x42, 0x65, 0x74,
	0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4f,
	0x75, 0x74, 0x4f, 0x66, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6b,
	0x72, 0x75, 0x70, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xa6,
	0x01, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x52, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x52, 0x08, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x22, 0xdc, 0x04, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x52, 0x06, 0x44, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0a,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x42, 0x69,
	0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41,
	0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x08, 0x42, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x25,
	0x0a, 0x03, 0x50, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x49,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x52, 0x03, 0x50, 0x6f, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x42, 0x65, 0x74, 0x74, 0x65, 0x64, 0x54,
	0x68, 0x69, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x52, 0x0e, 0x42, 0x65, 0x74, 0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x73, 0x48, 0x61,
	0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x42, 0x65, 0x74, 0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x49,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x52, 0x0f, 0x42, 0x65, 0x74, 0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x73, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x52, 0x06,
	0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x93, 0x03, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a,
	0x08, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x69, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x69, 0x70, 0x73, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x69, 0x70, 0x73, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x52, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x42, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x52, 0x08, 0x42, 0x69, 0x67,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x52, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x69, 0x70, 0x73, 0x22, 0x7d, 0x0a, 0x11,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x47, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0b,
	0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x49, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x49,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x2a, 0xa0, 0x02, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x49,
	0x6e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x10, 0x63, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x10, 0x64, 0x12,
	0x1e, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe8, 0x07, 0x12,
	0x18, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x10, 0xea, 0x07, 0x2a, 0x98, 0x01, 0x0a, 0x0a, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65,
	0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x70, 0x10,
	0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x70, 0x10, 0x0b, 0x12,
	0x0d, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x69, 0x76, 0x65, 0x72, 0x10, 0x0c, 0x12, 0x0c,
	0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x0e, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x63,
	0x12, 0x12, 0x0a, 0x0d, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0xe8, 0x07, 0x32, 0xa1, 0x01, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x1d, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x19, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x16, 0x5a, 0x14, 0x41, 0x49, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2f, 0x41, 0x49, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_AICardProto_AICardProto_proto_rawDescOnce sync.Once
	file_AICardProto_AICardProto_proto_rawDescData = file_AICardProto_AICardProto_proto_rawDesc
)

func file_AICardProto_AICardProto_proto_rawDescGZIP() []byte {
	file_AICardProto_AICardProto_proto_rawDescOnce.Do(func() {
		file_AICardProto_AICardProto_proto_rawDescData = protoimpl.X.CompressGZIP(file_AICardProto_AICardProto_proto_rawDescData)
	})
	return file_AICardProto_AICardProto_proto_rawDescData
}

var file_AICardProto_AICardProto_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_AICardProto_AICardProto_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_AICardProto_AICardProto_proto_goTypes = []interface{}{
	(PlayerStatus)(0),         // 0: AIPokerProto.PlayerStatus
	(GameStatus)(0),           // 1: AIPokerProto.GameStatus
	(*PlayerID)(nil),          // 2: AIPokerProto.PlayerID
	(*GameStateID)(nil),       // 3: AIPokerProto.GameStateID
	(*Chips)(nil),             // 4: AIPokerProto.Chips
	(*Card)(nil),              // 5: AIPokerProto.Card
	(*PlayerDefinition)(nil),  // 6: AIPokerProto.PlayerDefinition
	(*PlayerState)(nil),       // 7: AIPokerProto.PlayerState
	(*GameInteraction)(nil),   // 8: AIPokerProto.GameInteraction
	(*GameState)(nil),         // 9: AIPokerProto.GameState
	(*GameDefinition)(nil),    // 10: AIPokerProto.GameDefinition
	(*PlayerInscription)(nil), // 11: AIPokerProto.PlayerInscription
	(*GameHistory)(nil),       // 12: AIPokerProto.GameHistory
}
var file_AICardProto_AICardProto_proto_depIdxs = []int32{
	2,  // 0: AIPokerProto.PlayerDefinition.ID:type_name -> AIPokerProto.PlayerID
	2,  // 1: AIPokerProto.PlayerState.ID:type_name -> AIPokerProto.PlayerID
	5,  // 2: AIPokerProto.PlayerState.Cards:type_name -> AIPokerProto.Card
	4,  // 3: AIPokerProto.PlayerState.Chips:type_name -> AIPokerProto.Chips
	0,  // 4: AIPokerProto.PlayerState.Status:type_name -> AIPokerProto.PlayerStatus
	4,  // 5: AIPokerProto.PlayerState.BettedThisHand:type_name -> AIPokerProto.Chips
	4,  // 6: AIPokerProto.PlayerState.BettedThisStage:type_name -> AIPokerProto.Chips
	0,  // 7: AIPokerProto.GameInteraction.Action:type_name -> AIPokerProto.PlayerStatus
	4,  // 8: AIPokerProto.GameInteraction.Amount:type_name -> AIPokerProto.Chips
	2,  // 9: AIPokerProto.GameInteraction.PlayerID:type_name -> AIPokerProto.PlayerID
	3,  // 10: AIPokerProto.GameState.ID:type_name -> AIPokerProto.GameStateID
	1,  // 11: AIPokerProto.GameState.Status:type_name -> AIPokerProto.GameStatus
	2,  // 12: AIPokerProto.GameState.Dealer:type_name -> AIPokerProto.PlayerID
	2,  // 13: AIPokerProto.GameState.SmallBlind:type_name -> AIPokerProto.PlayerID
	2,  // 14: AIPokerProto.GameState.BigBlind:type_name -> AIPokerProto.PlayerID
	4,  // 15: AIPokerProto.GameState.Pot:type_name -> AIPokerProto.Chips
	4,  // 16: AIPokerProto.GameState.BettedThisHand:type_name -> AIPokerProto.Chips
	4,  // 17: AIPokerProto.GameState.BettedThisStage:type_name -> AIPokerProto.Chips
	7,  // 18: AIPokerProto.GameState.Players:type_name -> AIPokerProto.PlayerState
	5,  // 19: AIPokerProto.GameState.ComunityCards:type_name -> AIPokerProto.Card
	2,  // 20: AIPokerProto.GameState.Winner:type_name -> AIPokerProto.PlayerID
	4,  // 21: AIPokerProto.GameDefinition.MaxRaise:type_name -> AIPokerProto.Chips
	4,  // 22: AIPokerProto.GameDefinition.MinRaise:type_name -> AIPokerProto.Chips
	4,  // 23: AIPokerProto.GameDefinition.SmallBlind:type_name -> AIPokerProto.Chips
	4,  // 24: AIPokerProto.GameDefinition.BigBlind:type_name -> AIPokerProto.Chips
	4,  // 25: AIPokerProto.GameDefinition.StartingPlayerChips:type_name -> AIPokerProto.Chips
	6,  // 26: AIPokerProto.PlayerInscription.Player:type_name -> AIPokerProto.PlayerDefinition
	10, // 27: AIPokerProto.PlayerInscription.Game:type_name -> AIPokerProto.GameDefinition
	9,  // 28: AIPokerProto.GameHistory.State:type_name -> AIPokerProto.GameState
	6,  // 29: AIPokerProto.GameHistory.Players:type_name -> AIPokerProto.PlayerDefinition
	10, // 30: AIPokerProto.GameHistory.Game:type_name -> AIPokerProto.GameDefinition
	8,  // 31: AIPokerProto.GameServices.Interact:input_type -> AIPokerProto.GameInteraction
	6,  // 32: AIPokerProto.GameServices.Join:input_type -> AIPokerProto.PlayerDefinition
	12, // 33: AIPokerProto.GameServices.Interact:output_type -> AIPokerProto.GameHistory
	11, // 34: AIPokerProto.GameServices.Join:output_type -> AIPokerProto.PlayerInscription
	33, // [33:35] is the sub-list for method output_type
	31, // [31:33] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_AICardProto_AICardProto_proto_init() }
func file_AICardProto_AICardProto_proto_init() {
	if File_AICardProto_AICardProto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_AICardProto_AICardProto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AICardProto_AICardProto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStateID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AICardProto_AICardProto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AICardProto_AICardProto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AICardProto_AICardProto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AICardProto_AICardProto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AICardProto_AICardProto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInteraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AICardProto_AICardProto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AICardProto_AICardProto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AICardProto_AICardProto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AICardProto_AICardProto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_AICardProto_AICardProto_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_AICardProto_AICardProto_proto_goTypes,
		DependencyIndexes: file_AICardProto_AICardProto_proto_depIdxs,
		EnumInfos:         file_AICardProto_AICardProto_proto_enumTypes,
		MessageInfos:      file_AICardProto_AICardProto_proto_msgTypes,
	}.Build()
	File_AICardProto_AICardProto_proto = out.File
	file_AICardProto_AICardProto_proto_rawDesc = nil
	file_AICardProto_AICardProto_proto_goTypes = nil
	file_AICardProto_AICardProto_proto_depIdxs = nil
}
